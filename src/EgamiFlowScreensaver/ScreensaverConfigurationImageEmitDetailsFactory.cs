// <copyright file="ScreensaverConfigurationImageEmitDetailsFactory.cs" company="natsnudasoft">
// Copyright (c) Adrian John Dunstan. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// </copyright>

namespace Natsnudasoft.EgamiFlowScreensaver
{
    using System;
    using Microsoft.Xna.Framework;
    using Natsnudasoft.EgamiFlowScreensaver.Config;
    using Natsnudasoft.NatsnudaLibrary;

    /// <summary>
    /// Provides a class which will create instances of <see cref="IImageEmitDetails"/> based on a
    /// <see cref="ScreensaverConfiguration"/> retrieved from the specified
    /// <see cref="IServiceProvider"/>.
    /// </summary>
    /// <seealso cref="IImageEmitDetailsFactory" />
    /// <seealso cref="IImageEmitDetails" />
    public class ScreensaverConfigurationImageEmitDetailsFactory : IImageEmitDetailsFactory
    {
        private readonly IServiceProvider serviceProvider;
        private readonly Random random;

        /// <summary>
        /// Initializes a new instance of the
        /// <see cref="ScreensaverConfigurationImageEmitDetailsFactory"/> class.
        /// </summary>
        /// <param name="serviceProvider">The service provider for the currently running
        /// <see cref="Game"/>.</param>
        /// <exception cref="ArgumentNullException"><paramref name="serviceProvider"/> is
        /// <see langword="null"/>.</exception>
        public ScreensaverConfigurationImageEmitDetailsFactory(IServiceProvider serviceProvider)
            : this(serviceProvider, new Random())
        {
        }

        /// <summary>
        /// Initializes a new instance of the
        /// <see cref="ScreensaverConfigurationImageEmitDetailsFactory"/> class.
        /// </summary>
        /// <param name="serviceProvider">The service provider for the currently running
        /// <see cref="Game"/>.</param>
        /// <param name="random">A pseudo-random number generator that can be used to generate
        /// randomness in the <see cref="IImageEmitDetails"/> generated by this factory.</param>
        /// <exception cref="ArgumentNullException"><paramref name="serviceProvider"/>, or
        /// <paramref name="random"/> is <see langword="null"/>.</exception>
        public ScreensaverConfigurationImageEmitDetailsFactory(
            IServiceProvider serviceProvider,
            Random random)
        {
            ParameterValidation.IsNotNull(serviceProvider, nameof(serviceProvider));
            ParameterValidation.IsNotNull(random, nameof(random));

            this.serviceProvider = serviceProvider;
            this.random = random;
        }

        /// <inheritdoc/>
        /// <exception cref="ArgumentNullException"><paramref name="screensaverArea"/> is
        /// <see langword="null"/>.</exception>
        public IImageEmitDetails Create(ScreensaverArea screensaverArea)
        {
            ParameterValidation.IsNotNull(screensaverArea, nameof(screensaverArea));

            var configFileService = this.serviceProvider.GetService<IConfigurationFileService>();
            var screensaverConfiguration = configFileService.Open();
            IImageEmitDetails imageEmitDetails;
            switch (screensaverConfiguration.ImageEmitLocation)
            {
                case ImageEmitLocation.Custom:
                    imageEmitDetails = new CustomImageEmitDetails(
                        screensaverArea,
                        screensaverConfiguration,
                        this.random);
                    break;
                case ImageEmitLocation.RandomCorner:
                    imageEmitDetails = new RandomCornerImageEmitDetails(
                        screensaverArea,
                        screensaverConfiguration,
                        this.random);
                    break;
                case ImageEmitLocation.Random:
                    imageEmitDetails = new RandomImageEmitDetails(
                        screensaverArea,
                        screensaverConfiguration,
                        this.random);
                    break;
                case ImageEmitLocation.Center:
                    imageEmitDetails = new CenterImageEmitDetails(
                        screensaverArea,
                        screensaverConfiguration,
                        this.random);
                    break;
                case ImageEmitLocation.BottomRight:
                    imageEmitDetails = new BottomRightImageEmitDetails(
                        screensaverArea,
                        screensaverConfiguration,
                        this.random);
                    break;
                case ImageEmitLocation.TopRight:
                    imageEmitDetails = new TopRightImageEmitDetails(
                        screensaverArea,
                        screensaverConfiguration,
                        this.random);
                    break;
                case ImageEmitLocation.TopLeft:
                    imageEmitDetails = new TopLeftImageEmitDetails(
                        screensaverArea,
                        screensaverConfiguration,
                        this.random);
                    break;
                case ImageEmitLocation.BottomLeft:
                default:
                    imageEmitDetails = new BottomLeftImageEmitDetails(
                        screensaverArea,
                        screensaverConfiguration,
                        this.random);
                    break;
            }

            return imageEmitDetails;
        }
    }
}