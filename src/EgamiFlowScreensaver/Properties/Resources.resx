<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="WindowTitle" xml:space="preserve">
    <value>Egami Flow Screensaver</value>
  </data>
  <data name="ChooseABackgroundImageCaption" xml:space="preserve">
    <value>No background image selected.</value>
  </data>
  <data name="ChooseABackgroundImageText" xml:space="preserve">
    <value>You must choose a background image when image background mode is selected.</value>
  </data>
  <data name="UnhandledExceptionCaption" xml:space="preserve">
    <value>Unhandled Exception</value>
  </data>
  <data name="UnhandledExceptionMessage" xml:space="preserve">
    <value>An unhandled exception occurred, please see the log file for more details.</value>
  </data>
  <data name="ConfigurationIOExceptionCaption" xml:space="preserve">
    <value>Configuration Directory Error</value>
  </data>
  <data name="ConfigurationIOExceptionMessage" xml:space="preserve">
    <value>An error occurred when attempting to read from or write to the configuration directory.</value>
  </data>
  <data name="ConfigurationTimeoutExceptionCaption" xml:space="preserve">
    <value>Configuration Timeout</value>
  </data>
  <data name="ConfigurationTimeoutExceptionMessage" xml:space="preserve">
    <value>Timed out while waiting for access to the configuration directory.</value>
  </data>
  <data name="ConfigurationUnauthorisedAccessExceptionCaption" xml:space="preserve">
    <value>Configuration Unauthorised Access</value>
  </data>
  <data name="ConfigurationUnauthorisedAccessExceptionMessage" xml:space="preserve">
    <value>The current user does not have access to the configuration directory.</value>
  </data>
  <data name="ConfigurationProtoExceptionCaption" xml:space="preserve">
    <value>Configuration File Error</value>
  </data>
  <data name="ConfigurationProtoExceptionMessage" xml:space="preserve">
    <value>An error occurred while reading or writing to the configuration file.</value>
  </data>
  <data name="ConfigurationReadSettingsErrorCaption" xml:space="preserve">
    <value>Configuration Load Problem</value>
  </data>
  <data name="ConfigurationReadSettingsErrorMessage" xml:space="preserve">
    <value>There was a problem loading the existing configuration. Choosing to ignore this will create a new configuration and overwrite the existing one. How would you like to proceed?</value>
  </data>
  <data name="ImageScaleModeCenter" xml:space="preserve">
    <value>Centre</value>
  </data>
  <data name="ImageScaleModeFill" xml:space="preserve">
    <value>Fill</value>
  </data>
  <data name="ImageScaleModeFit" xml:space="preserve">
    <value>Fit</value>
  </data>
  <data name="ImageScaleModeStretch" xml:space="preserve">
    <value>Stretch</value>
  </data>
  <data name="ImageScaleModeTile" xml:space="preserve">
    <value>Tile</value>
  </data>
  <data name="ImageEmitLocationBottomLeft" xml:space="preserve">
    <value>Bottom Left</value>
  </data>
  <data name="ImageEmitLocationBottomRight" xml:space="preserve">
    <value>Bottom Right</value>
  </data>
  <data name="ImageEmitLocationCenter" xml:space="preserve">
    <value>Centre</value>
  </data>
  <data name="ImageEmitLocationRandom" xml:space="preserve">
    <value>Random</value>
  </data>
  <data name="ImageEmitLocationTopLeft" xml:space="preserve">
    <value>Top Left</value>
  </data>
  <data name="ImageEmitLocationTopRight" xml:space="preserve">
    <value>Top Right</value>
  </data>
  <data name="ImageEmitLocationRandomCorner" xml:space="preserve">
    <value>Random Corner</value>
  </data>
  <data name="ImageFileFilterString" xml:space="preserve">
    <value>Image Files (*.bmp, *.jpg, *.jpeg, *.png) | *.bmp; *.jpg; *.jpeg; *.png|All Files|*.*</value>
  </data>
  <data name="ImageEmitLocationCustom" xml:space="preserve">
    <value>Custom...</value>
  </data>
  <data name="ImageItemBehaviorTypeColorChange" xml:space="preserve">
    <value>Colour Change Behaviour</value>
  </data>
  <data name="ImageItemBehaviorTypeAlphaChange" xml:space="preserve">
    <value>Alpha Change Behaviour</value>
  </data>
  <data name="ImageItemBehaviorTypeScaleChange" xml:space="preserve">
    <value>Scale Change Behaviour</value>
  </data>
  <data name="NoConfigurationFormForBehaviorCaption" xml:space="preserve">
    <value>No configuration options available.</value>
  </data>
  <data name="NoConfigurationFormForBehaviorText" xml:space="preserve">
    <value>There are no configuration options available for the selected behaviour type.</value>
  </data>
  <data name="ImageItemBehaviorTypeRotationChange" xml:space="preserve">
    <value>Rotation Change Behaviour</value>
  </data>
  <data name="AlphaChangeBehaviorDescription" xml:space="preserve">
    <value>A behaviour that causes emitted images to transition from one alpha value (transparency) to another over a specified time frame. Valid alpha values are between 0.0 and 1.0 inclusive, although the alpha start value can be less than 0.0 to delay when the transition becomes apparent on screen.</value>
  </data>
  <data name="ColorChangeBehaviorDescription" xml:space="preserve">
    <value>A behaviour that causes emitted images to transition from one colour to another over a specified time frame.</value>
  </data>
  <data name="RotationChangeBehaviorDescription" xml:space="preserve">
    <value>A behaviour that causes emitted images to transition from one rotation value (in degrees) to another over a specified time frame; valid rotation values can be any negative or positive value.
Please note that changing image rotation can cause incorrect collision behaviour when images bounce off of the edges of the screen.</value>
  </data>
  <data name="ScaleChangeBehaviorDescription" xml:space="preserve">
    <value>A behaviour that causes emitted images to transition from one scale (relative size) to another over a specified time frame. Valid scale values are between 0.0 and 1.0 inclusive, although scale start values van be less than 0.0 to delay when the transition becomes apparent on screen.
Please note that changing image scale can cause incorrect collision behaviour when images bounce off of the edges of the screen.</value>
  </data>
  <data name="TransitionTimeLessThanLifetimeCaption" xml:space="preserve">
    <value>Transition time less than image lifetime.</value>
  </data>
  <data name="TransitionTimeLessThanLifetimeText" xml:space="preserve">
    <value>The transition time of this behaviour is longer than the lifetime of any emitted images, this may cause strange behaviour, are you sure you want to continue with these values?</value>
  </data>
</root>