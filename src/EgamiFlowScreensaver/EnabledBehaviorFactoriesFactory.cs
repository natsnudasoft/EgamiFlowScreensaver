// <copyright file="EnabledBehaviorFactoriesFactory.cs" company="natsnudasoft">
// Copyright (c) Adrian John Dunstan. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// </copyright>

namespace Natsnudasoft.EgamiFlowScreensaver
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using Microsoft.Xna.Framework;
    using Natsnudasoft.EgamiFlowScreensaver.Config;
    using Natsnudasoft.NatsnudaLibrary;

    /// <summary>
    /// Provides a factory class that when the associated configuration behaviour is enabled will
    /// create factories that are capable of creating behaviours that can be applied to images that
    /// are emitted by a screensaver.
    /// </summary>
    /// <seealso cref="IBehaviorFactoriesFactory" />
    public sealed class EnabledBehaviorFactoriesFactory : IBehaviorFactoriesFactory
    {
        private readonly Random random;

        /// <summary>
        /// Initializes a new instance of the <see cref="EnabledBehaviorFactoriesFactory"/> class.
        /// </summary>
        /// <param name="random">A pseudo-random number generator that can be used to generate
        /// randomness in the behaviour factories generated by this factory.</param>
        /// <exception cref="ArgumentNullException"><paramref name="random"/> is
        /// <see langword="null"/>.</exception>
        public EnabledBehaviorFactoriesFactory(Random random)
        {
            ParameterValidation.IsNotNull(random, nameof(random));

            this.random = random;
        }

        /// <inheritdoc/>
        /// <exception cref="ArgumentNullException"><paramref name="screensaverArea"/>, or
        /// <paramref name="configurationBehaviors"/> is <see langword="null"/>.</exception>
        public IEnumerable<Func<IScreensaverImageItemBehavior>> Create(
            ScreensaverArea screensaverArea,
            IEnumerable<ConfigurationBehavior> configurationBehaviors)
        {
            ParameterValidation.IsNotNull(screensaverArea, nameof(screensaverArea));
            ParameterValidation.IsNotNull(configurationBehaviors, nameof(configurationBehaviors));

            return configurationBehaviors
                .Where(b => b.Enabled)
                .Select(b => CreateBehaviorFactory(screensaverArea, b, this.random));
        }

        private static Func<IScreensaverImageItemBehavior> CreateBehaviorFactory(
            ScreensaverArea screensaverArea,
            ConfigurationBehavior configurationBehavior,
            Random random)
        {
            Func<IScreensaverImageItemBehavior> behaviorFactory;
            var behaviorType = configurationBehavior.ConfigurationBehaviorType;
            switch (behaviorType)
            {
                case ConfigurationBehaviorType.ColorChange:
                    behaviorFactory = CreateColorChangeBehaviorFactory(
                        screensaverArea,
                        configurationBehavior as ColorChangeConfigurationBehavior);
                    break;
                case ConfigurationBehaviorType.ScaleChange:
                    behaviorFactory = CreateScaleChangeBehaviorFactory(
                        screensaverArea,
                        configurationBehavior as ScaleChangeConfigurationBehavior);
                    break;
                case ConfigurationBehaviorType.AlphaChange:
                    behaviorFactory = CreateAlphaChangeBehaviorFactory(
                        screensaverArea,
                        configurationBehavior as AlphaChangeConfigurationBehavior);
                    break;
                case ConfigurationBehaviorType.RotationChange:
                    behaviorFactory = CreateRotationChangeBehaviorFactory(
                        screensaverArea,
                        configurationBehavior as RotationChangeConfigurationBehavior,
                        random);
                    break;
                default:
                    throw new InvalidOperationException("No method defined for converting the " +
                        $"specified behavior type ({behaviorType}) to a behavior factory.");
            }

            return behaviorFactory;
        }

        private static Func<IScreensaverImageItemBehavior> CreateColorChangeBehaviorFactory(
            ScreensaverArea screensaverArea,
            ColorChangeConfigurationBehavior configurationBehavior)
        {
            var startColor = new Color(
                configurationBehavior.StartColor.R,
                configurationBehavior.StartColor.G,
                configurationBehavior.StartColor.B,
                byte.MaxValue);
            var endColor = new Color(
                configurationBehavior.EndColor.R,
                configurationBehavior.EndColor.G,
                configurationBehavior.EndColor.B,
                byte.MaxValue);
            return () => new ColorChangeScreensaverImageItemBehavior(
                screensaverArea,
                startColor,
                endColor,
                configurationBehavior.TransitionTime);
        }

        private static Func<IScreensaverImageItemBehavior> CreateScaleChangeBehaviorFactory(
            ScreensaverArea screensaverArea,
            ScaleChangeConfigurationBehavior configurationBehavior)
        {
            return () => new ScaleChangeScreensaverImageItemBehavior(
                screensaverArea,
                new Vector2(configurationBehavior.StartScaleX, configurationBehavior.StartScaleY),
                new Vector2(configurationBehavior.EndScaleX, configurationBehavior.EndScaleY),
                configurationBehavior.TransitionTime);
        }

        private static Func<IScreensaverImageItemBehavior> CreateAlphaChangeBehaviorFactory(
            ScreensaverArea screensaverArea,
            AlphaChangeConfigurationBehavior configurationBehavior)
        {
            return () => new AlphaChangeScreensaverImageItemBehavior(
                screensaverArea,
                configurationBehavior.StartAlpha,
                configurationBehavior.EndAlpha,
                configurationBehavior.TransitionTime);
        }

        private static Func<IScreensaverImageItemBehavior> CreateRotationChangeBehaviorFactory(
            ScreensaverArea screensaverArea,
            RotationChangeConfigurationBehavior configurationBehavior,
            Random random)
        {
            var startRadians = MathHelper.ToRadians(configurationBehavior.StartRotation);
            var endRadians = MathHelper.ToRadians(configurationBehavior.EndRotation);
            return () =>
            {
                if (configurationBehavior.RandomlyInvertRotation && random.Next(0, 2) == 0)
                {
                    startRadians = -startRadians;
                    endRadians = -endRadians;
                }

                return new RotationChangeScreensaverImageItemBehavior(
                    screensaverArea,
                    startRadians,
                    endRadians,
                    configurationBehavior.TransitionTime);
            };
        }
    }
}